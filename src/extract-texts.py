# extract-texts.py - Extracts SMS text contents from a JSON file generated by 
# the Android app "SMS Backup & Restore" by Firehawk. 

from argparse import ArgumentParser
from collections import deque
from datetime import datetime
import json

def parse_message(message: dict, senders: list[str]) -> str:
    # The indexes used for senders by the JSON file begin incrementing 
    # from 1 rather than 0. We correct for this here by subtracting 1.
    sender_index = message["type"] - 1
    body = message["body"]

    # Timestamps are UNIX epoch times in milliseconds. We divide by 
    # 1000 to get the UNIX epoch time in seconds so that datetime can 
    # process it.
    date = datetime.fromtimestamp(
        message["time"] / 1000
    )

    # In case too few senders are provided by the user when running
    # this program, we can default to "Unknown Sender X."
    if 0 <= sender_index < len(senders):
        sender_name = senders[sender_index]
    else:
        sender_name = f"UNKNOWN SENDER {sender_index + 1}"

    return f"{sender_name} ({date}): {body}\n"

if __name__ == "__main__":
    parser = ArgumentParser(
        prog="SyncTech SMS Message Extractor",
        description="Extracts SMS messages from SyncTech JSON files \
         and writes them to an output file."
    )

    parser.add_argument(
        "-i", "--input_file", 
        dest="in_file",
        help="The path to the input JSON file to parse.",
        required=True,
        type=str
    )
    parser.add_argument(
        "-o", "--output_file", 
        dest="out_file",
        help="The path to the output file.",
        required=True,
        type=str
    )
    parser.add_argument(
        "-s", "--senders",
        dest="senders",
        help="The list of sender names.",
        nargs="+",
        required=True,
        type=str
    )

    args = parser.parse_args()

    # Parse each individual message, add to the deque.
    messages = deque([])
    
    try:
        with open(args.in_file, "r", encoding="utf-8") as in_data:
            raw_data = in_data.read()
            raw_json = json.loads(raw_data)
            raw_json = raw_json["listSms"]
            
            for raw_message in raw_json:
                message = parse_message(raw_message, args.senders)
                messages.appendleft(message)
        
        # Take the formatted messages and append them to the output file.
        with open(args.out_file, "w", encoding="utf-8") as out_data:
            for message in messages:
                out_data.write(message)

    except FileNotFoundError:
        print(f"Error: Input file not found at '{args.in_file}'")
        exit(1)

    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{args.in_file}'.")
        exit(1)

    except KeyError:
        print("Error: The key 'listSms' was not found in the JSON file.")
        exit(1)
    
    print(f"Successfully extracted {len(messages)} messages to \
          '{args.out_file}'")